// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20221228211252_mig_2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyBlog.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdd590d1-0c43-4a68-8e57-edf67f70941c"),
                            ConcurrencyStamp = "23131c4b-2fa2-4210-95fd-a4c2b9ea07d5",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("d3e6fb00-d801-49f4-9c9a-b69e0f7a0e68"),
                            ConcurrencyStamp = "1a1c8399-386e-4a46-8252-d4a3b79d820c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("10b7cda0-ed06-431e-a3ec-c88a69db8a92"),
                            ConcurrencyStamp = "af695388-44c8-48ea-aed7-98abbd3b7fc3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0f21285-8b81-4c46-bc74-3e1db74290fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d96a40f7-2ef0-4f6a-8a34-183173bc9051",
                            Email = "melihomerkamar0@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melih SuperAdmin",
                            LastName = "Kamar",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIHOMERKAMAR0@GMAIL.COM",
                            NormalizedUserName = "MELIHOMERKAMAR0@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8lkzPHhst/s/EYBLCmhf01Dq2Z+DqR1rdJEIZXU//J/fiqaWzaediZhRwWM7Arnw==",
                            PhoneNumber = "+905050900704",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b21b90e5-15c6-4a28-9c9a-b44f937ae47f",
                            TwoFactorEnabled = false,
                            UserName = "melihomerkamar0@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d617ef9e-6c36-4099-8220-6372aaf5b196"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d6dd77e-6564-4dcc-8e1b-df8edfdbeddb",
                            Email = "melih.o.k@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Melih Admin",
                            LastName = "Kamar",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIH.O.K@HOTMAIL.COM",
                            NormalizedUserName = "MELIH.O.K@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEME1AffNcB26gMtKix0/5k7Qj4uJXVXlotMz0c34uU16IfWdQPTmO6rTk4cP9jRSw==",
                            PhoneNumber = "+905050900704",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0e1d42f-91cc-4f3f-9911-afd02f8f10d1",
                            TwoFactorEnabled = false,
                            UserName = "melih.o.k@hotmail.com"
                        });
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b0f21285-8b81-4c46-bc74-3e1db74290fb"),
                            RoleId = new Guid("bdd590d1-0c43-4a68-8e57-edf67f70941c")
                        },
                        new
                        {
                            UserId = new Guid("d617ef9e-6c36-4099-8220-6372aaf5b196"),
                            RoleId = new Guid("d3e6fb00-d801-49f4-9c9a-b69e0f7a0e68")
                        });
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4705572-b7b0-4775-b02b-74f513d0cc89"),
                            CategoryId = new Guid("78f5f289-ffb9-4588-b3c9-888407ccf129"),
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır.",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2022, 12, 29, 0, 12, 51, 796, DateTimeKind.Local).AddTicks(5259),
                            IsDeleted = false,
                            Title = "Asp.Net Core Deneme Makalesi 1",
                            UserId = new Guid("b0f21285-8b81-4c46-bc74-3e1db74290fb"),
                            ViewCount = 10
                        },
                        new
                        {
                            Id = new Guid("41646b7a-8c51-4a7a-86f7-c834a2ff5881"),
                            CategoryId = new Guid("c0f71c92-e8c9-4d75-b3ec-c00c9240fe8b"),
                            Content = "Visual Studio Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır.",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2022, 12, 29, 0, 12, 51, 796, DateTimeKind.Local).AddTicks(5265),
                            IsDeleted = false,
                            Title = "Visual Studio Deneme Makalesi 1",
                            UserId = new Guid("d617ef9e-6c36-4099-8220-6372aaf5b196"),
                            ViewCount = 10
                        });
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78f5f289-ffb9-4588-b3c9-888407ccf129"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2022, 12, 29, 0, 12, 51, 796, DateTimeKind.Local).AddTicks(5646),
                            IsDeleted = false,
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("c0f71c92-e8c9-4d75-b3ec-c00c9240fe8b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2022, 12, 29, 0, 12, 51, 796, DateTimeKind.Local).AddTicks(5650),
                            IsDeleted = false,
                            Name = "Visual Studio 2022"
                        });
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b61018f1-65c1-4ab1-98aa-bce223156590"),
                            ArticleId = new Guid("e4705572-b7b0-4775-b02b-74f513d0cc89"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2022, 12, 29, 0, 12, 51, 802, DateTimeKind.Local).AddTicks(8789),
                            FileName = "images/TestImage",
                            FileType = "JPEG",
                            IsDeleted = false,
                            UserId = new Guid("b0f21285-8b81-4c46-bc74-3e1db74290fb")
                        },
                        new
                        {
                            Id = new Guid("58f06691-f7ba-4794-9da4-bb4895bf8426"),
                            ArticleId = new Guid("41646b7a-8c51-4a7a-86f7-c834a2ff5881"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2022, 12, 29, 0, 12, 51, 802, DateTimeKind.Local).AddTicks(8796),
                            FileName = "images/vs2022images",
                            FileType = "JPEG",
                            IsDeleted = false,
                            UserId = new Guid("d617ef9e-6c36-4099-8220-6372aaf5b196")
                        });
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("MyBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("MyBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("MyBlog.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("MyBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.Article", b =>
                {
                    b.HasOne("MyBlog.Entity.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.Image", b =>
                {
                    b.HasOne("MyBlog.Entity.Entities.Article", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.Article", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("MyBlog.Entity.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
